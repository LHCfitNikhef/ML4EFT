C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     -2*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) -
C      2*Epsilon(1,2,3,-2)*P(-2,2)*P(-1,1)*P(-1,3) -
C      2*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(-1,3) +
C      2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) +
C      2*Epsilon(2,3,-1,-2)*P(-2,2)*P(-1,1)*P(1,3) -
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) -
C      2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) +
C      2*Epsilon(1,2,-1,-2)*P(-2,2)*P(-1,3)*P(3,1) +
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) +
C      Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(1,2) -
C      Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,2) -
C      Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV8P0_1(V2, V3, COUP, M1, W1,V1)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP10
      REAL*8 P3(0:3)
      REAL*8 W1
      COMPLEX*16 TMP5
      COMPLEX*16 TMP14
      COMPLEX*16 COUP
      COMPLEX*16 TMP9
      COMPLEX*16 TMP2
      COMPLEX*16 V3(*)
      COMPLEX*16 TMP11
      REAL*8 M1
      REAL*8 P2(0:3)
      COMPLEX*16 TMP6
      COMPLEX*16 TMP15
      COMPLEX*16 TMP3
      COMPLEX*16 V2(*)
      COMPLEX*16 TMP12
      REAL*8 P1(0:3)
      COMPLEX*16 TMP7
      COMPLEX*16 DENOM
      COMPLEX*16 V1(6)
      COMPLEX*16 TMP13
      COMPLEX*16 TMP4
      COMPLEX*16 TMP8
      P2(0) = DBLE(V2(1))
      P2(1) = DBLE(V2(2))
      P2(2) = DIMAG(V2(2))
      P2(3) = DIMAG(V2(1))
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      V1(1) = +V2(1)+V3(1)
      V1(2) = +V2(2)+V3(2)
      P1(0) = -DBLE(V1(1))
      P1(1) = -DBLE(V1(2))
      P1(2) = -DIMAG(V1(2))
      P1(3) = -DIMAG(V1(1))
      TMP3 = (P3(0)*P1(0)-P3(1)*P1(1)-P3(2)*P1(2)-P3(3)*P1(3))
      TMP5 = (-1D0)*(P1(0)*(P3(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P3(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P3(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P3(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P3(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P3(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P3(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP9 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP8 = (P3(0)*V2(3)-P3(1)*V2(4)-P3(2)*V2(5)-P3(3)*V2(6))
      TMP2 = (P2(0)*P1(0)-P2(1)*P1(1)-P2(2)*P1(2)-P2(3)*P1(3))
      TMP4 = (P3(0)*P2(0)-P3(1)*P2(1)-P3(2)*P2(2)-P3(3)*P2(3))
      TMP15 = (V3(3)*V2(3)-V3(4)*V2(4)-V3(5)*V2(5)-V3(6)*V2(6))
      TMP14 = (-1D0)*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      TMP7 = (V2(3)*P1(0)-V2(4)*P1(1)-V2(5)*P1(2)-V2(6)*P1(3))
      TMP6 = (-1D0)*(P1(0)*(P2(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P2(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P2(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P2(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P2(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P2(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P2(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P2(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP11 = (-1D0)*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP10 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP13 = (-1D0)*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP12 = (-1D0)*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      DENOM = COUP/(P1(0)**2-P1(1)**2-P1(2)**2-P1(3)**2 - M1 * (M1 -CI
     $ * W1))
      V1(3)= DENOM*(-CI)*(P2(1)*(P3(2)*(-2D0)*(V3(6)*TMP7+V2(6)*TMP9
     $ +P1(3)*TMP15)+(P3(3)*2D0*(V3(5)*TMP7+V2(5)*TMP9+P1(2)*TMP15)
     $ +(TMP3*2D0*(V3(5)*V2(6)-V3(6)*V2(5))+2D0*(TMP8*(V3(5)*P1(3)
     $ -V3(6)*P1(2))))))+(P2(2)*(P3(1)*2D0*(V3(6)*TMP7+V2(6)*TMP9+P1(3)
     $ *TMP15)+(P3(3)*(-2D0)*(V3(4)*TMP7+V2(4)*TMP9+P1(1)*TMP15)+(TMP3
     $ *2D0*(V3(6)*V2(4)-V3(4)*V2(6))+2D0*(TMP8*(V3(6)*P1(1)-V3(4)
     $ *P1(3))))))+(P2(3)*(P3(1)*(-2D0)*(V3(5)*TMP7+V2(5)*TMP9+P1(2)
     $ *TMP15)+(P3(2)*2D0*(V3(4)*TMP7+V2(4)*TMP9+P1(1)*TMP15)+(TMP3
     $ *2D0*(V3(4)*V2(5)-V3(5)*V2(4))+2D0*(TMP8*(V3(4)*P1(2)-V3(5)
     $ *P1(1))))))+(TMP10*(P1(1)*2D0*(P3(3)*V2(5)-P3(2)*V2(6))+(P1(2)
     $ *2D0*(P3(1)*V2(6)-P3(3)*V2(4))+2D0*(P1(3)*(P3(2)*V2(4)-P3(1)
     $ *V2(5)))))+(TMP2*(P3(1)*2D0*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *2D0*(V3(6)*V2(4)-V3(4)*V2(6))+2D0*(P3(3)*(V3(4)*V2(5)-V3(5)
     $ *V2(4)))))+(TMP4*(P1(1)*2D0*(V3(5)*V2(6)-V3(6)*V2(5))+(P1(2)
     $ *2D0*(V3(6)*V2(4)-V3(4)*V2(6))+2D0*(P1(3)*(V3(4)*V2(5)-V3(5)
     $ *V2(4)))))+(V2(3)*(TMP11-TMP12)+(V3(3)*(TMP14-TMP13)+(+2D0
     $ *(P2(0)*TMP5+P3(0)*TMP6))))))))))
      V1(4)= DENOM*CI*(P2(0)*(P3(2)*2D0*(V3(6)*TMP7+V2(6)*TMP9+P1(3)
     $ *TMP15)+(P3(3)*(-2D0)*(V3(5)*TMP7+V2(5)*TMP9+P1(2)*TMP15)+(TMP3
     $ *2D0*(V3(6)*V2(5)-V3(5)*V2(6))+2D0*(TMP8*(V3(6)*P1(2)-V3(5)
     $ *P1(3))))))+(P2(2)*(P3(0)*(-2D0)*(V3(6)*TMP7+V2(6)*TMP9+P1(3)
     $ *TMP15)+(P3(3)*2D0*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(3)*V2(6)-V3(6)*V2(3))+2D0*(TMP8*(V3(3)*P1(3)-V3(6)
     $ *P1(0))))))+(P2(3)*(P3(0)*2D0*(V3(5)*TMP7+V2(5)*TMP9+P1(2)
     $ *TMP15)+(P3(2)*(-2D0)*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(5)*V2(3)-V3(3)*V2(5))+2D0*(TMP8*(V3(5)*P1(0)-V3(3)
     $ *P1(2))))))+(TMP10*(P1(0)*2D0*(P3(2)*V2(6)-P3(3)*V2(5))+(P1(2)
     $ *2D0*(P3(3)*V2(3)-P3(0)*V2(6))+2D0*(P1(3)*(P3(0)*V2(5)-P3(2)
     $ *V2(3)))))+(TMP2*(P3(0)*2D0*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)
     $ *2D0*(V3(3)*V2(6)-V3(6)*V2(3))+2D0*(P3(3)*(V3(5)*V2(3)-V3(3)
     $ *V2(5)))))+(TMP4*(P1(0)*2D0*(V3(6)*V2(5)-V3(5)*V2(6))+(P1(2)
     $ *2D0*(V3(3)*V2(6)-V3(6)*V2(3))+2D0*(P1(3)*(V3(5)*V2(3)-V3(3)
     $ *V2(5)))))+(V2(4)*(TMP12-TMP11)+(V3(4)*(TMP13-TMP14)+(-2D0
     $ *(P2(1)*TMP5+P3(1)*TMP6))))))))))
      V1(5)= DENOM*CI*(P2(0)*(P3(1)*(-2D0)*(V3(6)*TMP7+V2(6)*TMP9+P1(3)
     $ *TMP15)+(P3(3)*2D0*(V3(4)*TMP7+V2(4)*TMP9+P1(1)*TMP15)+(TMP3
     $ *2D0*(V3(4)*V2(6)-V3(6)*V2(4))+2D0*(TMP8*(V3(4)*P1(3)-V3(6)
     $ *P1(1))))))+(P2(1)*(P3(0)*2D0*(V3(6)*TMP7+V2(6)*TMP9+P1(3)
     $ *TMP15)+(P3(3)*(-2D0)*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(6)*V2(3)-V3(3)*V2(6))+2D0*(TMP8*(V3(6)*P1(0)-V3(3)
     $ *P1(3))))))+(P2(3)*(P3(0)*(-2D0)*(V3(4)*TMP7+V2(4)*TMP9+P1(1)
     $ *TMP15)+(P3(1)*2D0*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(3)*V2(4)-V3(4)*V2(3))+2D0*(TMP8*(V3(3)*P1(1)-V3(4)
     $ *P1(0))))))+(TMP10*(P1(0)*2D0*(P3(3)*V2(4)-P3(1)*V2(6))+(P1(1)
     $ *2D0*(P3(0)*V2(6)-P3(3)*V2(3))+2D0*(P1(3)*(P3(1)*V2(3)-P3(0)
     $ *V2(4)))))+(TMP2*(P3(0)*2D0*(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)
     $ *2D0*(V3(6)*V2(3)-V3(3)*V2(6))+2D0*(P3(3)*(V3(3)*V2(4)-V3(4)
     $ *V2(3)))))+(TMP4*(P1(0)*2D0*(V3(4)*V2(6)-V3(6)*V2(4))+(P1(1)
     $ *2D0*(V3(6)*V2(3)-V3(3)*V2(6))+2D0*(P1(3)*(V3(3)*V2(4)-V3(4)
     $ *V2(3)))))+(V2(5)*(TMP12-TMP11)+(V3(5)*(TMP13-TMP14)+(-2D0
     $ *(P2(2)*TMP5+P3(2)*TMP6))))))))))
      V1(6)= DENOM*CI*(P2(0)*(P3(1)*2D0*(V3(5)*TMP7+V2(5)*TMP9+P1(2)
     $ *TMP15)+(P3(2)*(-2D0)*(V3(4)*TMP7+V2(4)*TMP9+P1(1)*TMP15)+(TMP3
     $ *2D0*(V3(5)*V2(4)-V3(4)*V2(5))+2D0*(TMP8*(V3(5)*P1(1)-V3(4)
     $ *P1(2))))))+(P2(1)*(P3(0)*(-2D0)*(V3(5)*TMP7+V2(5)*TMP9+P1(2)
     $ *TMP15)+(P3(2)*2D0*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(3)*V2(5)-V3(5)*V2(3))+2D0*(TMP8*(V3(3)*P1(2)-V3(5)
     $ *P1(0))))))+(P2(2)*(P3(0)*2D0*(V3(4)*TMP7+V2(4)*TMP9+P1(1)
     $ *TMP15)+(P3(1)*(-2D0)*(V3(3)*TMP7+V2(3)*TMP9+P1(0)*TMP15)+(TMP3
     $ *2D0*(V3(4)*V2(3)-V3(3)*V2(4))+2D0*(TMP8*(V3(4)*P1(0)-V3(3)
     $ *P1(1))))))+(TMP10*(P1(0)*2D0*(P3(1)*V2(5)-P3(2)*V2(4))+(P1(1)
     $ *2D0*(P3(2)*V2(3)-P3(0)*V2(5))+2D0*(P1(2)*(P3(0)*V2(4)-P3(1)
     $ *V2(3)))))+(TMP2*(P3(0)*2D0*(V3(5)*V2(4)-V3(4)*V2(5))+(P3(1)
     $ *2D0*(V3(3)*V2(5)-V3(5)*V2(3))+2D0*(P3(2)*(V3(4)*V2(3)-V3(3)
     $ *V2(4)))))+(TMP4*(P1(0)*2D0*(V3(5)*V2(4)-V3(4)*V2(5))+(P1(1)
     $ *2D0*(V3(3)*V2(5)-V3(5)*V2(3))+2D0*(P1(2)*(V3(4)*V2(3)-V3(3)
     $ *V2(4)))))+(V2(6)*(TMP12-TMP11)+(V3(6)*(TMP13-TMP14)+(-2D0
     $ *(P2(3)*TMP5+P3(3)*TMP6))))))))))
      END


