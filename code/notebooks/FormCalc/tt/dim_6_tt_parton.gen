(* Patched for use with FeynCalc *)
(* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *)
(*                                                                               *)
(*         This file has been automatically generated by FeynRules.              *)
(*                                                                               *)
(* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *)



(*     Kinematic indices    *)

KinematicIndices[ F ] = {Dirac};
KinematicIndices[ V ] = {Lorentz};
KinematicIndices[ S ] = {};
KinematicIndices[ SV ] = {Lorentz};
KinematicIndices[ U ] = {};

$FermionLines = False;

(*     Simplification rules    *)

Attributes[ FAMetricTensor ] = Attributes[ FAScalarProduct ] = {Orderless}

FAFourVector/: -FAFourVector[ mom_, mu_ ] := FAFourVector[Expand[-mom], mu]

FAFourVector[ 0, _ ] = 0

SpinorType[j_Integer, ___] := MajoranaSpinor /; SelfConjugate[F[j]]

SpinorType[_Integer, __] = FADiracSpinor

(*     Generic propagators    *)

M$GenericPropagators={

(*general fermion propagator:*)

AnalyticalPropagator[External][s1 F[j1,mom,{di1}]]==
DiracObject[SpinorType[j1][-mom,Mass[F[j1]]]][di1],

AnalyticalPropagator[Internal][s1 F[j1,mom,{di1}->{di2}]]==
DiracObject[FADiracSlash[-mom]+Mass[F[j1]]][di1,di2]*
I FAPropagatorDenominator[mom,Mass[F[j1]]],

(*general vector boson propagator:*)

AnalyticalPropagator[External][s1 V[j1,mom,{li2}]]==
FAPolarizationVector[V[j1],mom,li2],

AnalyticalPropagator[Internal][s1 V[j1,mom,{li1}->{li2}]]==
-I FAPropagatorDenominator[mom,Mass[V[j1]]]*
(FAMetricTensor[li1,li2]-(1-FAGaugeXi[V[j1]])*
FAFourVector[mom,li1] FAFourVector[mom,li2]*
FAPropagatorDenominator[mom,Sqrt[FAGaugeXi[V[j1]]] Mass[V[j1]]]),

(*general mixing scalar-vector propagator:*)

AnalyticalPropagator[Internal][s1 SV[j1,mom,{li1}->{li2}]]==
I Mass[SV[j1]] FAPropagatorDenominator[mom,Mass[SV[j1]]]*
FAFourVector[mom,If[s1==1||s1==-2,li1,li2]],

(*general scalar propagator:*)

AnalyticalPropagator[External][s1 S[j1,mom]]==1,

AnalyticalPropagator[Internal][s1 S[j1,mom]]==
I FAPropagatorDenominator[mom,Sqrt[FAGaugeXi[S[j1]]] Mass[S[j1]]],

(*general Fadeev-Popov ghost propagator:*)

AnalyticalPropagator[External][s1 U[j1,mom]]==1,

AnalyticalPropagator[Internal][s1 U[j1,mom]]==
I*FAPropagatorDenominator[mom,Sqrt[FAGaugeXi[U[j1]]] Mass[U[j1]]]
}

(*     Generic couplings    *)

M$GenericCouplings = {

	 (* FFFF *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 F[j3, mom3, {di3}], s4 F[j4, mom4, {di4}] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 F[j3], s4 F[j4]].{IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di4]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di3], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di4]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di2], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di2]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di3], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di2]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di4], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di3]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di2], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di1,di3]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di4], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di3]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di1], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di2]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di1], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di1]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di2], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di1]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di4,di3], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di1]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di4], {a,1,4}], IndexSum[DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di2,di4]DiracObject[FADiracMatrix[a], FAChiralityProjector[+1] ][di3,di1], {a,1,4}]},

	 (* FFS *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 S[j3, mom3] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 S[j3]].{DiracObject[FAChiralityProjector[-1]][di1,di2], DiracObject[FAChiralityProjector[-1]][di2,di1], DiracObject[FAChiralityProjector[+1]][di1,di2], DiracObject[FAChiralityProjector[+1]][di2,di1]},

	 (* FFSV *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 S[j3, mom3], s4 V[j4, mom4, {li4}] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 S[j3], s4 V[j4]].{DiracObject[FADiracMatrix[li4], FADiracSlash[mom4 ], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracSlash[mom4 ], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li4], FADiracSlash[mom4 ], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracSlash[mom4 ], FAChiralityProjector[+1] ][di2,di1], DiracObject[FADiracSlash[mom4 ], FADiracMatrix[li4], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracSlash[mom4 ], FADiracMatrix[li4], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracSlash[mom4 ], FADiracMatrix[li4], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracSlash[mom4 ], FADiracMatrix[li4], FAChiralityProjector[+1] ][di2,di1]},

	 (* FFSVV *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 S[j3, mom3], s4 V[j4, mom4, {li4}], s5 V[j5, mom5, {li5}] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 S[j3], s4 V[j4], s5 V[j5]].{DiracObject[FADiracMatrix[li4], FADiracMatrix[li5], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracMatrix[li5], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li4], FADiracMatrix[li5], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracMatrix[li5], FAChiralityProjector[+1] ][di2,di1], DiracObject[FADiracMatrix[li5], FADiracMatrix[li4], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li5], FADiracMatrix[li4], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li5], FADiracMatrix[li4], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li5], FADiracMatrix[li4], FAChiralityProjector[+1] ][di2,di1]},

	 (* FFV *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 V[j3, mom3, {li3}] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 V[j3]].{DiracObject[FADiracMatrix[li3], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li3], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li3], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li3], FAChiralityProjector[+1] ][di2,di1], DiracObject[FADiracMatrix[li3], FADiracSlash[mom3 ], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li3], FADiracSlash[mom3 ], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li3], FADiracSlash[mom3 ], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li3], FADiracSlash[mom3 ], FAChiralityProjector[+1] ][di2,di1], DiracObject[FADiracSlash[mom3 ], FADiracMatrix[li3], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracSlash[mom3 ], FADiracMatrix[li3], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracSlash[mom3 ], FADiracMatrix[li3], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracSlash[mom3 ], FADiracMatrix[li3], FAChiralityProjector[+1] ][di2,di1]},

	 (* FFVV *)

AnalyticalCoupling[s1 F[j1, mom1, {di1}], s2 F[j2, mom2, {di2}], s3 V[j3, mom3, {li3}], s4 V[j4, mom4, {li4}] ] ==
G[-1][s1 F[j1], s2 F[j2], s3 V[j3], s4 V[j4]].{DiracObject[FADiracMatrix[li3], FADiracMatrix[li4], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li3], FADiracMatrix[li4], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li3], FADiracMatrix[li4], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li3], FADiracMatrix[li4], FAChiralityProjector[+1] ][di2,di1], DiracObject[FADiracMatrix[li4], FADiracMatrix[li3], FAChiralityProjector[-1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracMatrix[li3], FAChiralityProjector[-1] ][di2,di1], DiracObject[FADiracMatrix[li4], FADiracMatrix[li3], FAChiralityProjector[+1] ][di1,di2], DiracObject[FADiracMatrix[li4], FADiracMatrix[li3], FAChiralityProjector[+1] ][di2,di1]},

	 (* SSS *)

AnalyticalCoupling[s1 S[j1, mom1], s2 S[j2, mom2], s3 S[j3, mom3] ] ==
G[+1][s1 S[j1], s2 S[j2], s3 S[j3]].{1},

	 (* SSSS *)

AnalyticalCoupling[s1 S[j1, mom1], s2 S[j2, mom2], s3 S[j3, mom3], s4 S[j4, mom4] ] ==
G[+1][s1 S[j1], s2 S[j2], s3 S[j3], s4 S[j4]].{1},

	 (* SSVV *)

AnalyticalCoupling[s1 S[j1, mom1], s2 S[j2, mom2], s3 V[j3, mom3, {li3}], s4 V[j4, mom4, {li4}] ] ==
G[+1][s1 S[j1], s2 S[j2], s3 V[j3], s4 V[j4]].{FAMetricTensor[li3 ,li4 ]},

	 (* SVV *)

AnalyticalCoupling[s1 S[j1, mom1], s2 V[j2, mom2, {li2}], s3 V[j3, mom3, {li3}] ] ==
G[+1][s1 S[j1], s2 V[j2], s3 V[j3]].{FAMetricTensor[li2 ,li3 ]},

	 (* VVV *)

AnalyticalCoupling[s1 V[j1, mom1, {li1}], s2 V[j2, mom2, {li2}], s3 V[j3, mom3, {li3}] ] ==
G[+1][s1 V[j1], s2 V[j2], s3 V[j3]].{FAFourVector[mom1, li3]FAMetricTensor[li1 ,li2 ], FAFourVector[mom2, li3]FAMetricTensor[li1 ,li2 ], FAFourVector[mom1, li2]FAMetricTensor[li1 ,li3 ], FAFourVector[mom3, li2]FAMetricTensor[li1 ,li3 ], FAFourVector[mom2, li1]FAMetricTensor[li2 ,li3 ], FAFourVector[mom3, li1]FAMetricTensor[li2 ,li3 ]},

	 (* VVVV *)

AnalyticalCoupling[s1 V[j1, mom1, {li1}], s2 V[j2, mom2, {li2}], s3 V[j3, mom3, {li3}], s4 V[j4, mom4, {li4}] ] ==
G[+1][s1 V[j1], s2 V[j2], s3 V[j3], s4 V[j4]].{FAMetricTensor[li1 ,li4 ]FAMetricTensor[li2 ,li3 ], FAMetricTensor[li1 ,li3 ]FAMetricTensor[li2 ,li4 ], FAMetricTensor[li1 ,li2 ]FAMetricTensor[li3 ,li4 ]}
}

(* FlippingRules: the flipping rules determines how Dirac
   objects change when the order of fermion fields in the
   coupling is reversed. In other words, it defines how the 
   coupling C[F, -F, ...] is derived from C[-F, F, ...].*)

M$FlippingRules = {
}

	(* TruncationRules: rule for omitting the wave functions of
	   external Propagators defined in this file. *)

M$TruncationRules = {
  _FAPolarizationVector -> 1,
  _FADiracSpinor -> 1,
  _MajoranaSpinor -> 1 
}
	(* LastGenericRules: the very last rules that are applied to an
	   amplitude before it is returned by CreateFeynAmp. *)

M$LastGenericRules = {
  FAPolarizationVector[p_, _. mom:FourMomentum[Outgoing, _], li_] :>
    Conjugate[FAPolarizationVector][p, mom, li]
}
	(* cosmetics: *)

	(*  left spinor in chain + mom incoming -> ar v
	    left spinor in chain + mom outgoing -> ar u
	   right spinor in chain + mom incoming -> u
	   right spinor in chain + mom outgoing -> v *)
Format[
  FermionChain[
    FANonCommutative[_[s1_. mom1_, mass1_]],
    r___,
    FANonCommutative[_[s2_. mom2_, mass2_]]] ] :=
  Overscript[If[FreeQ[mom1, Incoming], "u", "v"], "_"][mom1, mass1] .
    r . If[FreeQ[mom2, Outgoing], "u", "v"][mom2, mass2]

Format[ FADiracSlash ] = "gs"

Format[ FADiracMatrix ] = "ga"

Format[ FAChiralityProjector[1] ] = SequenceForm["om", Subscript["+"]]

Format[ FAChiralityProjector[-1] ] = SequenceForm["om", Subscript["-"]]

Format[ FAGaugeXi[a_] ] := SequenceForm["xi", Subscript[a]]

Format[ FAPolarizationVector ] = "ep"

Unprotect[Conjugate];
Format[ Conjugate[a_] ] = SequenceForm[a, Superscript["*"]];
Protect[Conjugate]

Format[ FAMetricTensor ] = "g"

Format[ FAScalarProduct[a__] ] := Dot[a]

Format[ FAFourVector[a_, b_] ] := a[b]

